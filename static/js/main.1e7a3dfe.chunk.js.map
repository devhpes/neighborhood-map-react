{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Map","scriptTag","window","document","createElement","src","concat","async","defer","body","appendChild","loadMapUrl","getVenues","axios","get","URLSearchParams","client_id","client_secret","query","near","v","limit","then","response","setState","venues","data","groups","items","catch","error","alert","initMap","map","google","maps","getElementById","center","lat","lng","zoom","mapTypeControl","bounds","LatLngBounds","InfoWindow","markers","venuesInfo","state","myVenue","contentString","venue","name","toUpperCase","location","address","city","postalCode","id","marker","Marker","position","animation","Animation","DROP","addListener","getAnimation","setAnimation","BOUNCE","setTimeout","event","setContent","setCenter","open","push","contents","extend","getPosition","fitBounds","allVenues","clickHandler","trigger","handlingSearchQuery","filterVenues","hideMarkers","closeInfoWindow","setVisible","match","RegExp","escapeRegExp","filter","test","every","myVenues","hidden","prevmarker","close","_this2","react_default","a","className","type","placeholder","aria-labelledby","value","onChange","e","target","key","onClick","aria-label","role","tabIndex","Component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e7a3dfe.chunk.js","sourcesContent":["import React,{ Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport escapeRegExp from 'escape-string-regexp';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      allVenues: [],\n      venues: [],\n      markers: [],\n      map: [],\n      filterVenues: [],\n      hideMarkers: [],\n      query: \"\",\n      prevmarker: \"\",\n    }\n    //this.initMap = this.initMap.bind(this);\n  }\n\n  componentDidMount(){\n    this.getVenues();\n    window.initMap = this.initMap;\n    //console.log(\"Component did mount\");\n  }\n  \n  //Load the map script\n  Map = () => {\n    loadMapUrl();\n  }\n\n  //Fetching places inforamtion using Foursquare API\n  getVenues = () => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\n    const credentials = {\n      client_id: \"ZAM2ZVYH1W4E5KRSTWM140LP5UWX20J5XHK4NAUJLO5CJUNH\",\n      client_secret: \"CZTDHFFXI4SXYOXAN41MCUG2PPDEDIAATTCVRC1FUMGOSI1C\",\n      query: \"Food\",\n      near: \"New York\", \n      v: \"20181107\",\n      limit:10,\n    }\n    \n    //Promise based HTTP client for the browser\n    axios.get(endPoint + new URLSearchParams(credentials))\n    .then(response => {\n      this.setState({\n        venues: response.data.response.groups[0].items\n      }, this.Map() )//callback function\n    })\n    .catch(error =>{\n      alert(\"Error Occured While Fetching Foursquare API\" + error);\n    });\n  }  \n\n  initMap = () => {\n    // Constructor creates a new map - only center and zoom are required.\n    this.map = new window.google.maps.Map(document.getElementById('map'), {\n      center: {lat: 40.730610, lng: -73.935242},\n      zoom: 14,\n      mapTypeControl: true\n    });\n\n    //Creating InfoWindow and Latitude and Longitudes Bounds\n    const bounds = new window.google.maps.LatLngBounds();\n    this.InfoWindow = new window.google.maps.InfoWindow();\n\n    //Plotting marker and content on the map\n    this.markers = [];\n    this.venuesInfo = [];\n\n    //Mapping all the venues using map function to add content to all markers\n    //on the map\n    this.state.venues.map(myVenue => {\n    //Content String Reference https://developers.google.com/maps/documentation/javascript/infowindows\n    const contentString = `<div><h2>${myVenue.venue.name.toUpperCase()}</h2>\n                          <h3>Address: ${myVenue.venue.location.address}</h3>\n                          <h3>Location: ${myVenue.venue.location.city}, ${myVenue.venue.location.state} </h3>\n                          <h3>Pincode: ${myVenue.venue.location.postalCode}</h3>\n                          <p><strong> ${'<a href=\"https://foursquare.com/v/' + myVenue.venue.id + '\" target=\"_blank\">Click Here For More Info</a>'} </strong> </p></div>`\n\n    const marker = new window.google.maps.Marker({\n      map: this.map,\n      position: {lat: myVenue.venue.location.lat, lng: myVenue.venue.location.lng},\n      animation: window.google.maps.Animation.DROP,\n      name: myVenue.venue.name,\n      id: myVenue.venue.id,\n      });\n\n      marker.addListener('click', () => {\n        //Adding animation to the markers. \n        if(marker.getAnimation() !== null){marker.setAnimation(null);}\n        else{marker.setAnimation(window.google.maps.Animation.BOUNCE);}\n        setTimeout(function(){ marker.setAnimation(null) }, 1000)\n      });\n\n      window.google.maps.event.addListener(marker, 'click', () => {\n        // Putting all the content on the map\n        this.InfoWindow.setContent(contentString)\n        //Centering the position of the map according to the marker\n        this.map.setCenter(marker.position);\n\n        this.InfoWindow.open(this.map, marker);\n      });\n\n      //Pushing markers to marker variable and pushing venues in the \n      //venuesInfo variable \n      this.state.markers.push(marker);\n      this.venuesInfo.push({id: myVenue.venue.id, name:myVenue.venue.name, contents: contentString})\n\n      bounds.extend(marker.getPosition());\n      //Adding listener to the marker\n      this.map.fitBounds(bounds);\n      //Setting state of map, InfoWindow and Venues, So that can be used later\n      this.setState ({\n        map: this.map,\n        InfoWindow: this.InfoWindow,\n        venues: this.venuesInfo,\n        allVenues: this.venuesInfo,// create venues copy to restore it after when user clear the input search\n        });\n\n    return myVenue.marker;\n    });\n\n  }\n\n  //Handling user clicks, Whenever user clicks on the sidebar li item, InfoWindow get opened\n  clickHandler = (venues) => {\n    this.state.markers.map(marker => {\n      // Comparing the marker id and venues id, If they are same, then only it will trigger the marker to open \n      // whenever user clicks on the name of the venue in the sidebar\n      if (marker.id === venues.id) {\n        window.google.maps.event.trigger(marker, 'click');\n      }\n      return venues;\n    });\n  }\n\n  // Handling search, Whenever user type in the search box, the list according to the search input will be changed\n//and only the search venue and marker will be shown\nhandlingSearchQuery = (query) => {\n  this.closeInfoWindow();\n  this.setState({ query });\n  let filterVenues;\n  let hideMarkers;\n  this.state.markers.map(marker => marker.setVisible(true));\n  if (query) {\n    const match = new RegExp(escapeRegExp(query), 'i');\n    filterVenues = this.state.venues.filter(venue => match.test(venue.name));\n    this.setState({ venues: filterVenues });\n    hideMarkers = this.state.markers.filter(marker => filterVenues.every(myVenues => myVenues.name !== marker.name));\n    this.setState({ hideMarkers });\n    this.state.markers.map(marker => {\n      hideMarkers.map(hidden =>{\n        //comparing id of both marker and hideMarkers\n        if (hidden.id === marker.id ) {\n          marker.setVisible(false);\n        }\n        return hidden;\n      })\n      return marker;\n    });\n  } else {\n    this.setState({ venues: this.state.allVenues });\n  }\n}\n \n//Closing InfoWindow function\ncloseInfoWindow = () => {\n  if (this.state.prevmarker) {\n      this.state.prevmarker.setAnimation(null);\n  }\n  this.setState({\n      \"prevmarker\": \"\"\n  });\n  this.state.InfoWindow.close();\n}\n\n\n  render() {\n    return (\n      <main id=\"App\">\n      <div id=\"sideBar\">\n      <div className=\"heading\">\n      <h2>Food Places In New York City</h2>\n      <div>\n      <input type=\"text\" className=\"search\" placeholder=\"Search..\" aria-labelledby=\"filter\" value={this.state.query} onChange={(e) => {this.handlingSearchQuery(e.target.value)}}></input>\n      </div>\n      </div>\n      {this.state.venues  && this.state.venues.map((venue, id) => ( \n      <div key={id} id=\"venueList\" >\n      <ul id=\"listItem\" onClick={() => {this.clickHandler(venue)}}>\n      <li>\n      {venue.name}\n      </li>\n      </ul>\n      </div>\n      ))}\n      </div>\n      <div id=\"map\" aria-label=\"Map\" role=\"application\" tabIndex=\"-1\">\n      </div>\n      </main>\n    );\n  }\n}\n\n\n// This function will generate script a tag and will insert the google map API URL Dynamically in the HTML.\nfunction loadMapUrl(){\n  const scriptTag = window.document.createElement('script');\n  const apiKey = 'AIzaSyASFSGSrxEXyjwZSqMyzRJBbfq_eFutui8';\n  scriptTag.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap`;\n  scriptTag.async = true;\n  scriptTag.defer = true;\n  document.body.appendChild(scriptTag);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}